import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import plotly.subplots as sp
import pathlib
  

def explorador_app():

    script_dir = pathlib.Path(__file__).resolve().parent

    st.subheader("Explorador de Coches 游뚱游댌")

    st.write("""Descubre todo lo que sabes sobre los coches de segunda mano en este espacio interactivo, 
             donde encontrar치s la informaci칩n necesaria para enteder nuestra calculadora de precios pudiendo,
             adem치s, filtrar por marca, tipo de coche y a침o.""")

    st.sidebar.markdown("*" * 10)
    st.sidebar.markdown("Selecciona `A침o`, `Marca` y `Tipo de Coche` para explorar los datos.")

    df = pd.read_csv(f"{script_dir}/../data/coches_consolidado_limpio.csv")
    q1 = df['precio'].quantile(0.25)
    q3 = df['precio'].quantile(0.75)
    ric = q3 - q1

    lim_izq = q1 - 1.5 * ric
    lim_der = q3 + 1.5 * ric

    df_sin_outliers = df[(df['precio'] >= lim_izq) & (df['precio'] <= lim_der)]

    min_a침o = int(df["anio_matricula"].min())
    max_a침o = int(df["anio_matricula"].max())

    a침o_seleccionado = st.sidebar.slider("Selecciona el rango de a침os", min_a침o, max_a침o, (min_a침o, max_a침o))

    marcas_disponibles = ["Todos"] + sorted(df["marca_sola"].astype(str).unique().tolist())
    tipos_disponibles = ["Todos"] + sorted(df["carroceria"].astype(str).unique().tolist())

    marcas_seleccionadas = st.sidebar.multiselect("Selecciona Marca(s)", marcas_disponibles, default="Todos")
    tipos_seleccionados = st.sidebar.multiselect("Selecciona Tipo de Coche", tipos_disponibles, default="Todos")

    marcas_txt = "de todas las marcas" if "Todos" in marcas_seleccionadas else f"marca {', '.join(marcas_seleccionadas)}"
    tipos_txt = "todos los tipos" if "Todos" in tipos_seleccionados else f"tipo {', '.join(tipos_seleccionados)}"
    observacion_boxplot = """Se pueden observar valores m치ximos, m칤nimos, medianas, medias y cuartiles, y si corresponde, 
                            valores at칤picos en la distribuci칩n de precio en cada categor칤a."""

    df_filtrado = df_sin_outliers.copy()
    
    df_filtrado = df_filtrado[(df_filtrado["anio_matricula"] >= a침o_seleccionado[0]) & (df_filtrado["anio_matricula"] <= a침o_seleccionado[1])]

    if "Todos" not in marcas_seleccionadas:
        df_filtrado = df_filtrado[df_filtrado["marca_sola"].isin(marcas_seleccionadas)]
    if "Todos" not in tipos_seleccionados:
        df_filtrado = df_filtrado[df_filtrado["carroceria"].isin(tipos_seleccionados)]

    #Heatmap de correlaci칩n de variables

    label_dict =   {'kilometraje': 'Kilometraje',
                    'garantia': 'Garant칤a',
                    'plazas': 'Plazas',
                    'potencia': 'Potencia',
                    'puertas': 'Puertas',
                    'precio': 'Precio',
                    'consumo_medio': 'Consumo Medio',
                    'mes_matricula': 'Mes de Matr칤cula',
                    'anio_matricula': 'A침o de Matr칤cula'
                    }
    columnas_heatmap = ['kilometraje','garantia', 'plazas', 'potencia', 'puertas', 'precio', 'consumo_medio', 'mes_matricula', 'anio_matricula']
    matriz_correl = df_filtrado[columnas_heatmap].corr()
    heatmap = px.imshow(img = matriz_correl,
                        labels = label_dict,
                        title = "Correlaci칩n de las variables de Coches",
                        color_continuous_scale=[(0, "blue"), (0.5, "white"), (1, "green")],
                        text_auto = True)
    heatmap.update_layout(
    xaxis=dict(tickmode='array', tickvals=list(range(len(matriz_correl.columns))), ticktext=[label_dict[col] for col in matriz_correl.columns]),
    yaxis=dict(tickmode='array', tickvals=list(range(len(matriz_correl.columns))), ticktext=[label_dict[col] for col in matriz_correl.columns])
)
    st.plotly_chart(heatmap)

    if not marcas_seleccionadas or not tipos_seleccionados:
        st.write('Introduzca un tipo de coche y una marca para visualizar el gr치fico de correlaci칩n de variables.')
    else:
       
        st.write(f"En este Heatmap se muestra la correlaci칩n de variables de los coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")

    #Histograma de distribuci칩n de precios

    df_histograma = df.copy()
    df_histograma['tipo'] = df_histograma['precio'].apply(lambda x: "Outlier" if x > lim_der or x < lim_izq else "Normal") 

    df_histograma = df_histograma[(df_histograma["anio_matricula"] >= a침o_seleccionado[0]) & (df_histograma["anio_matricula"] <= a침o_seleccionado[1])]

    if "Todos" not in marcas_seleccionadas:
        df_histograma = df_histograma[df_histograma["marca_sola"].isin(marcas_seleccionadas)]
    if "Todos" not in tipos_seleccionados:
        df_histograma = df_histograma[df_histograma["carroceria"].isin(tipos_seleccionados)]

    histograma = px.histogram(data_frame = df_histograma, 
             x                  = "precio",
             nbins              = 50,
             color              = 'tipo',
             color_discrete_map = {'Normal':'blue','Outlier':'red'},
             title              = 'Distribuci칩n de precios y sus outliers',
             labels             = {'precio': 'Precio en Euros', 'tipo': 'Tipo'})

    st.plotly_chart(histograma)

    if not marcas_seleccionadas or not tipos_seleccionados:
        st.write('Introduzca un tipo de coche y una marca para visualizar el gr치fico de distribuci칩n de precios.')
    else:
       
        st.write(f"En este Histograma se muestra la distribuci칩n de precios de los coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}, diferenciando a sus outliers.")

    #Evoluci칩n del precio medio seg칰n el a침o de antig칲edad

    df_promedio = df_filtrado.groupby('anio_matricula')['precio'].mean().reset_index()

    fig_anio_matricula = px.line(df_promedio, x='anio_matricula', y='precio', 
                                title='Evoluci칩n del precio medio seg칰n el a침o de antig칲edad',
                                labels={'anio_matricula': 'A침o', 'precio': 'Precio Medio en Euros'})

    fig_anio_matricula.update_layout(
        xaxis_title="A침o", 
        yaxis_title="Precio Medio en Euros",
        width=900, 
        height=500
    )

    st.plotly_chart(fig_anio_matricula)

    if not marcas_seleccionadas or not tipos_seleccionados:
        st.write('Introduzca un tipo de coche y una marca para visualizar el gr치fico de evoluci칩n del precio medio.')
    else:
        st.write(f"En este gr치fico de l칤nea se muestra la evoluci칩n del precio medio {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")    

    #Boxplot de distribuci칩n de precios seg칰n marca, tipo de coche

    fig = px.box(df_filtrado, x="marca_sola", y="precio", color="carroceria",
                 title="Distribuci칩n de precios por Marca y Tipo de Coche",
                 labels={"precio": "Precio en Euros", "marca_sola": "Marca", "carroceria": "Tipo de Coche", "modelo_titulo": "Modelo"},
                 hover_data=["modelo_titulo"])

    fig.update_layout(xaxis_tickangle=-45, width=900, height=500)

    st.plotly_chart(fig)
    if not marcas_seleccionadas or not tipos_seleccionados:
        st.write('Introduzca un tipo de coche y una marca para visualizar el gr치fico de distribuci칩n de precios.')
    else:
        marcas_txt = "de todas las marcas" if "Todos" in marcas_seleccionadas else f"marca {', '.join(marcas_seleccionadas)}"
        tipos_txt = "todos los tipos" if "Todos" in tipos_seleccionados else f"tipo {', '.join(tipos_seleccionados)}"
    
        st.write(f"En este Boxplot se muestra la distribuci칩n de precios de los coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")
        st.write(observacion_boxplot)

    #Gr치fico distribuci칩n de precios seg칰n distintivo ambiental y tipo de combustible
    
    fig = sp.make_subplots(
    rows=1, cols=2,  
    subplot_titles=("Distribuci칩n de precios seg칰n Distintivo Ambiental", "Distribuci칩n de precios seg칰n Combustible"),
    vertical_spacing=0.15
    )

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['distintivo_ambiental'].astype(str),
        name='Distribuci칩n de precios seg칰n Distintivo Ambiental',
        boxmean='sd',  
        marker=dict(color='lightblue')
    ), row=1, col=1)

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['combustible'],
        name='Distribuci칩n de precios seg칰n Combustible',
        boxmean='sd', 
        marker=dict(color='lightgreen')
    ), row=1, col=2)

    
    fig.update_layout(
        title="Distribuci칩n de Precios seg칰n distintas Distintivo Ambiental y Combustible",
        width=900,  
        height=500,  
        showlegend=False
    )

    fig.update_xaxes(title_text="Distintivo Ambiental", row=1, col=1)
    fig.update_yaxes(title_text="Precio en Euros", row=1, col=1)

    fig.update_xaxes(title_text="Tipo de Combustible", row=1, col=2)
    fig.update_yaxes(title_text="Precio en Euros", row=1, col=2)

    st.plotly_chart(fig)

    if not marcas_seleccionadas or not tipos_seleccionados:
            st.write('Introduzca tipo de coche y una marca para visualizar la distribuci칩n del precio seg칰n distintivo ambiental y tipo de combustible.')
    else:
        st.write(f"En este Boxplot se muestra la distribuci칩n de precios seg칰n distintivo ambiental y combustible de coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")    
        st.write(observacion_boxplot)

    #Subplots de distribuci칩n de precios segun distintos variables

    fig = sp.make_subplots(
    rows=2, cols=2,  
    subplot_titles=("Distribuci칩n de precios seg칰n Plazas", "Distribuci칩n de precios seg칰n Puertas","Distribuci칩n de precios seg칰n Garant칤a", "Distribuci칩n de precios seg칰n Color"),
    vertical_spacing=0.25
    )

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['plazas'].astype(str),
        name='Distribuci칩n de precios seg칰n Plazas',
        boxmean='sd',  
        marker=dict(color='lightblue')
    ), row=1, col=1)

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['puertas'],
        name='Distribuci칩n de precios seg칰n Puertas',
        boxmean='sd', 
        marker=dict(color='lightgreen')
    ), row=1, col=2)

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['garantia'],
        name='Distribuci칩n de precios seg칰n Garant칤a',
        boxmean='sd', 
        marker=dict(color='red')
    ), row=2, col=1)

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['color'],
        name='Distribuci칩n de precios seg칰n Color',
        boxmean='sd', 
        marker=dict(color='orange')
    ), row=2, col=2)

    fig.update_layout(
        title="Distribuci칩n de Precios seg칰n distintas variables",
        width=900,  
        height=500,  
        showlegend=False
    )

    fig.update_xaxes(title_text="N칰mero de Plazas", row=1, col=1)
    fig.update_yaxes(title_text="Precio en Euros", row=1, col=1)

    fig.update_xaxes(title_text="N칰mero de Puertas", row=1, col=2)
    fig.update_yaxes(title_text="Precio en Euros", row=1, col=2)

    fig.update_xaxes(title_text="Garant칤a en meses", row=2, col=1)
    fig.update_yaxes(title_text="Precio en Euros", row=2, col=1)

    fig.update_xaxes(title_text="Color", row=2, col=2)
    fig.update_yaxes(title_text="Precio en Euros", row=2, col=2)

    st.plotly_chart(fig)

    if not marcas_seleccionadas or not tipos_seleccionados:
            st.write('Introduzca tipo de coche y una marca para visualizar la distribuci칩n del precio seg칰n variables.')
    else:
        st.write(f"En este caso, podemos ver la distribuci칩n de precios seg칰n distintas variables de coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")    
        st.write(observacion_boxplot)

    #Subplots de relaci칩n entre Kilometraje, Potencia y Precio (escala logar칤tmica)

    fig = sp.make_subplots(
        rows=1, cols=2,  
        subplot_titles=("Kilometraje vs Precio en escala logar칤tmica", "Potencia vs Precio en escala logar칤tmica"),
        vertical_spacing=0.1
    )

    df_scatter = df_filtrado.copy()
    df_scatter['precio'] = df_scatter['precio'].replace(0,np.nan)
    df_scatter['kilometraje'] = df_scatter['kilometraje'].replace(0,np.nan)
    df_scatter['potencia'] = df_scatter['potencia'].replace(0,np.nan)

    fig.add_trace(go.Scatter(
        x=np.log(df_scatter['kilometraje']), 
        y=np.log(df_scatter['precio']),
        mode='markers',
        name='Kilometraje',
        marker=dict(color='lightblue', size=6),
        hovertext=df_scatter.apply(lambda row: f"Marca: {row['marca_sola']}<br>Modelo: {row['modelo_titulo']}<br>Precio: {row['precio']}<br>Kilometraje: {row['kilometraje']}", axis=1),
        hoverinfo='text'
    ), row=1, col=1)

    fig.add_trace(go.Scatter(
        x=np.log(df_scatter['potencia']),
        y=np.log(df_scatter['precio']),
        mode='markers',
        name='Potencia',
        marker=dict(color='lightgreen', size=6),
        hovertext=df_scatter.apply(lambda row: f"Marca: {row['marca_sola']}<br>Modelo: {row['modelo_titulo']}<br>Precio: {row['precio']}<br>Potencia: {row['potencia']}", axis=1),
        hoverinfo='text'
    ), row=1, col=2)

    fig.update_layout(
        title="Relaci칩n entre Kilometraje, Potencia y Precio (escala logar칤tmica)",
        width=900,  
        height=500,  
        showlegend=True
    )

    fig.update_xaxes(title_text="Kil칩metros", row=1, col=1)
    fig.update_yaxes(title_text="Precio en Euros", row=1, col=1)

    fig.update_xaxes(title_text="Potencia", row=1, col=2)
    fig.update_yaxes(title_text="Precio en Euros", row=1, col=2)

    st.plotly_chart(fig)

    if not marcas_seleccionadas or not tipos_seleccionados:
        st.write('Introduzca un tipo de coche y una marca para visualizar los gr치ficos de dispersi칩n.')
    else:
        st.write(f"En estos gr치ficos de dispersi칩n se muestra la distribuci칩n de precios de los coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]} en relaci칩n al kilometraje y la potencia.")
        st.write("En el gr치fico de precios por kilometraje se puede observar que en general, a medida que aumenta el kilometraje, el precio disminuye.")
        st.write("En el de precios por potencia, la relacion es positiva, lo que indica que los coches con potencia m치s alta tienden a tener precios m치s altos.")

    #Subplots de distribuci칩n de precios seg칰n Comunidad, Provincia y Municipio

    fig = sp.make_subplots(
        rows=1, cols=2,  
        subplot_titles=("Consumo Medio por Marca", "Consumo Medio por Combustible"),
        vertical_spacing=0.1
    )

    fig.add_trace(go.Box(
        y=df_filtrado['consumo_medio'],
        x=df_filtrado['marca_sola'],
        name='Consumo Medio por Marca',
        boxmean='sd',  
        marker=dict(color='lightblue')
    ), row=1, col=1)

    fig.add_trace(go.Box(
        y=df_filtrado['consumo_medio'],
        x=df_filtrado['combustible'],
        name='Consumo Medio por Combustible',
        boxmean='sd', 
        marker=dict(color='lightgreen')
    ), row=1, col=2)

    fig.update_layout(
        title="Distribuci칩n del Consumo Medio por Marca y Combustible",
        width=900,  
        height=500,  
        showlegend=False
    )

    st.plotly_chart(fig)

    if not marcas_seleccionadas or not tipos_seleccionados:
            st.write('Introduzca tipo de coche y una marca para visualizar la distribuci칩n del consumo medio seg칰n marca, tipo de coche ycombustible.')
    else:
        st.write(f"Aqu칤 podemos apreciar la distribuci칩n del consumo medio seg칰n marca, tipo de coche y combustible de coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")    
        st.write(observacion_boxplot)

    concesionarios = pd.read_csv(f"{script_dir}/../data/concesionarios_limpio.csv")
    concesionarios["municipio"] = concesionarios["municipio"].str.replace("Municipio: ", "", regex=True)
    
    concesionarios['nombre'] = concesionarios['nombre'].apply(lambda x: x.upper())
    concesionarios = concesionarios.rename(columns={'nombre': 'nombre_vendedor'})
    concesionarios = concesionarios[["nombre_vendedor", "municipio", "codigo_postal"]]

    df_municipios = df_sin_outliers.copy()
    df_municipios['nombre_vendedor'] = df_municipios['nombre_vendedor'].fillna('').apply(lambda x: x.replace('\r', ''))
    df_unido = pd.merge(df_municipios, concesionarios, on='nombre_vendedor', how='left')

    fig = sp.make_subplots(
        rows=3, cols=1,  
        subplot_titles=("Distribuci칩n de Precio por Comunidad", "Distribuci칩n de Precio por Provincia", "Distribuci칩n de Precio por Municipio"),
        vertical_spacing=0.25
    )

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['comunidad'],
        name='Distribuci칩n de Precio por Comunidad',
        boxmean='sd',  
        marker=dict(color='lightblue')
    ), row=1, col=1)

    fig.add_trace(go.Box(
        y=df_filtrado['precio'],
        x=df_filtrado['provincia'],
        name='Distribuci칩n de Precio por Provincia',
        boxmean='sd', 
        marker=dict(color='lightgreen')
    ), row=2, col=1)

    fig.add_trace(go.Box(
        y=df_unido['precio'],
        x=df_unido['municipio'].astype(str),
        name='Distribuci칩n de Precio por Municipio',
        boxmean='sd', 
        marker=dict(color='lightgreen')
    ), row=3, col=1)

    fig.update_layout(
        title="Distribuci칩n Precio por Comunidad, Provincia y municipio.",
        width=900,  
        height=700,  
        showlegend=False
    )

    st.plotly_chart(fig)  
    if not marcas_seleccionadas or not tipos_seleccionados:
            st.write('Introduzca tipo de coche y una marca para visualizar la distribuci칩n del precio seg칰n Comunidad, Provincia y Municipio.')
    else:
        st.write(f"A partir destros tres gr치ficos, podemos notar la distribuci칩n de precios seg칰n Comunidad, Provincia y Municipio de coches {marcas_txt} de {tipos_txt} entre los a침os {a침o_seleccionado[0]} y {a침o_seleccionado[1]}.")    
        st.write(observacion_boxplot)
         

if __name__ == "__main__":
    explorador_app()